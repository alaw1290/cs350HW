package hw6;

public class MyProcessDekker extends Thread{
	private int id;
	static volatile boolean[] flag = new boolean[2];
	static volatile int turn = 0;
	static volatile long fairness;
	
	public MyProcessDekker (int i, long f){
		id = i;
		fairness = f;
	}
	
	public void run(){

		int i = id;
		int j = Math.abs(id-1);
		
		for(int iter = 1; iter < 6; iter++){
			try{
				
				//Dekker entry protocol
				flag[i] = true;
				System.out.printf("%d start entry protocol\n",id);
				//fairness modifier: make thread 0 wait longer
				Thread.sleep(2000*fairness*j);
				
				while(flag[j]){
					if(turn == j){
						flag[i] = false;
						//fairness modifier: make thread 0 wait longer
						Thread.sleep(2000*fairness*j);
						while (turn == j) {};
						flag[i] = true;
					}
				}
				
				//CS begins
				System.out.printf("%d - Starting iteration %d\n",id,iter);
				System.out.printf("%d - We hold these truths to be self-evident, that all men are created equal,\n",id);
				System.out.printf("%d - that they are endowed by their Creator with certain unalienable Rights,\n",id);
				System.out.printf("%d - that among these are Life, Liberty and the pursuit of Happiness.\n",id);
				System.out.printf("%d - Done iteration %d\n",id,iter);
				//CS ends
				
				//Dekker exit protocol
				turn = j;
			    flag[i] = false;
			    Thread.sleep( (long)(20.0*Math.random() ));
				
			}
			catch(InterruptedException e){
				System.out.println("Thread " + Integer.toString(id) + " interrupted");
			}
		}
	}
	
	public static void main(String[] args) throws Exception{
		final int N = 2;
		MyProcessDekker[] p = new MyProcessDekker[N];
		
		//fairness:fair iteration set to 0, unfair iteration set to 1
		long fairness = 0;
		
		for (int i = 0; i < N; i++){
			p[i] = new MyProcessDekker(i, fairness);
			p[i].start();
		}
		
	}
	
}
