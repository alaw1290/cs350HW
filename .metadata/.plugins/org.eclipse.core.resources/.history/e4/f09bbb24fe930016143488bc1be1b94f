package hw4;

import java.util.Random;

public class Controller {
	public double SystemLambda;
	public double CPUsr;
	public double Netsr;
	public double Disksr;
	public double simulationLength;
	public double currentTime;
	private Random rand;
	
	public Controller(double lamb, double cTS, double nTS, double dTS, double simlen){
		//Initializes the parameters for the system components
		SystemLambda = lamb;
		CPUsr = 1.0/cTS;
		Netsr = 1.0/nTS;
		Disksr = 1.0/dTS;
		simulationLength = simlen;
	}
	
	public void run(){
		//runs simulation of network queues
		currentTime = 0;
		Scheduler scheduler = new Scheduler(SystemLambda, SystemLambda*2, CPUsr, Netsr, Disksr, simulationLength);
		Logger logger = new Logger();
		rand = new Random();
		
		//CPU Queue Deaths IDs: 21(A), 22(B)
		MM2 CPU = new MM2();
		
		//Network Queue Death ID: 3
		MM1 Network = new MM1();
		
		//Disk Queue Death ID: 4
		MM1 Disk = new MM1();
		
		while(currentTime < simulationLength){
			Event currentEvent = scheduler.nextEvent();
			currentTime = currentEvent.time;
			
			//currentEvent.type = 0: Log Event
			if(currentEvent.type == 0){
				//utilization of CPU
				double c = 0;
				if(CPU.serverA != null){
					c = c + 0.5;
				}
				if(CPU.serverB != null){
					c = c + 0.5;
				}
				
				//utilization of Net
				double n = 0;
				if(Network.server != null){
					n = 1;
				}
				
				//utilization of Disk
				double d = 0;
				if(Disk.server != null){
					d = 1;
				}
						
				logger.writeLog(CPU.queue.size() + (c*2), c, n, d);
			}
			
			//currentEvent.type = 1: System Birth Event
			if(currentEvent.type == 1){
				Request request = new Request(currentTime);
				
				//status 0:in queue, 1: in server A, 2: in server B
				int status = CPU.birth(request);
				
				if(status == 1){
					scheduler.insertDeathEvent(currentTime,21);
				}
				else if(status == 2){
					scheduler.insertDeathEvent(currentTime,22);
				}
				
			}
			
			//currentEvent.type = 21: CPU A Death Event
			if(currentEvent.type == 21){
				Request request = CPU.death1();
				
				//check if death event needs to be generated
				if(CPU.serverA != null){
					scheduler.insertDeathEvent(currentTime,21);
				}
				
				//check where request will now go
				double random = rand.nextDouble();
				
				//p(leaves system) = 0.5
				if(random <= 0.5){
					logger.logRequest(request.queueLog());
				}
				
				//p(enters net) = 0.4
				else if(random <= 0.9){
					Network.birth(request);;
				}
				//p(enters disk) = 0.1
				else{
					Disk.birth(request);
				}
				
			}
			//currentEvent.type = 22: CPU B Death Event
			//currentEvent.type = 3: Network Death Event
			//currentEvent.type = 4: Disk Death Event
		}
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
